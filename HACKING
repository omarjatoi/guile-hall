# -*- mode: org; coding: utf-8; -*-

#+TITLE: Hacking hall

* Contributing

By far the easiest way to hack on hall is to develop using Guix:

#+BEGIN_SRC bash
  # Obtain the source code
  cd /path/to/source-code
  guix shell -Df guix.scm
  # In the new shell, run:
  autoreconf -vif && ./configure && make check
#+END_SRC

You may also want to set your directory as an authorized directory for
`guix shell' so it works without arguments. To do that, simply run

#+BEGIN_SRC bash
  echo $(pwd) >> $HOME/.config/guix/shell-authorized-directories
#+END_SRC

You can now hack this project's files to your heart's content, whilst
testing them from your `guix shell' shell.

To try out any scripts in the project you can now use

#+BEGIN_SRC bash
  ./pre-inst-env scripts/${script-name}
#+END_SRC

If you'd like to tidy the project again, but retain the ability to test the
project from the commandline, simply run:

#+BEGIN_SRC bash
  ./hall clean --skip "scripts/${script-name},pre-inst-env" --execute
#+END_SRC

** Manual Installation

If you do not yet use  Guix, you will have to install this project's
dependencies manually:
  - autoconf
  - automake
  - pkg-config
  - texinfo
  - guile-config
  - guile-library

Once those dependencies are installed you can run:

#+BEGIN_SRC bash
  autoreconf -vif && ./configure && make check
#+END_SRC

* Running Comprehensive Tests locally

** Configuring Guile Hall from a Source Checkout

#+BEGIN_SRC shell
guix shell -Df guix.scm -- bash -c 'autoreconf -vif && ./configure'
#+END_SRC

** Running the Test Suit from a Source Checkout (after configure)

#+BEGIN_SRC shell
guix shell -Df guix.scm -- make check
#+END_SRC

** Running an Isolated Distribution Test

#+begin_src shell
guix shell --container --pure -Df guix.scm git -- bash -c '\
  cd /tmp && git clone ~/src/guile-hall && cd guile-hall \
     && autoreconf -vif && ./configure && make distcheck \
'
#+end_src
