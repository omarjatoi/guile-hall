#!@GUILE@ \
--no-auto-compile -e main -s
!#

;; bin/hall --- hall cli -*- coding: utf-8 -*-
;;
;; Copyright (C) 2018-2020 Alex Sassmannshausen <alex@pompo.co>
;;
;; Author: Alex Sassmannshausen <alex@pompo.co>
;;
;; This file is part of guile-hall.
;;
;; guile-hall is free software; you can redistribute it and/or modify it under
;; the terms of the GNU General Public License as published by the Free
;; Software Foundation; either version 3 of the License, or (at your option)
;; any later version.
;;
;; guile-hall is distributed in the hope that it will be useful, but WITHOUT
;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
;; more details.
;;
;; You should have received a copy of the GNU General Public License along
;; with guile-hall; if not, contact:
;;
;; Free Software Foundation           Voice:  +1-617-542-5942
;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;; Boston, MA  02111-1307,  USA       gnu@gnu.org

;;; Commentary:
;;
;;; Code:

(use-modules (config)
             (hall builders)
             (hall clean)
             (hall common)
             (hall config)
             (hall build)
             (hall dist)
             (hall friends)
             (hall hconfig)
             (hall init)
             (hall logging)
             (hall scan)
             (hall spec)
             (ice-9 match)
             (srfi srfi-19)
             (srfi srfi-26))

(define* (main #:optional (args (command-line)))
  "Entry point for the commandline application.  ARGS should be a normal
command-line list, e.g. '(\"hall\" \"clean\" \"--x\")."
  (init-locale)
  (let* ((options (getopt-config-auto args %configuration))
         (operation (if (option-ref options 'execute) 'exec 'show))
         (force (option-ref options 'force))
         (verbose (option-ref options 'verbose)))
    (setup-logging #:level (if verbose
                               (make-log-level debug)
                               (make-log-level warning)))
    (match (full-command options)
      (("hall")
       (emit-help options))
      (("hall" "initiate")
       (let* ((name (option-ref options '(name)))
              (spec (scm->specification
                     (map (Î» (t)
                            (let lp ((t t))
                              (match t
                                ((label '= thing)
                                 `(,label ,thing))
                                ;; Use vectors as `(arg) is valid input for next
                                ;; clause.
                                ((label (? vector? sub))
                                 `(,label ,(map lp (vector->list sub))))
                                ((label opt)
                                 `(,label ,(option-ref options opt)))
                                (label
                                 `(,label ,(option-ref options label))))))
                          `((name = ,name) prefix author (version = "0.1") email
                            (copyright = (,(date-year (current-date))))
                            (synopsis = "") (description = "")
                            (features #((guix guix?)
                                        (native-language-support = #f)
                                        (licensing licensing?)))
                            (home-page website) license (dependencies = `())
                            (skip = ())))
                     (default-files name))))
         (cond ((option-ref options 'convert)
                (create-project-here spec '() operation))
               (else (create-project spec '() operation)))))
      (cmd
       ;; The features must be read in isolation, before the whole
       ;; spec file is parsed, as the 'dependencies' procedure
       ;; behavior is parameterized by them.
       (define feat (read-features))
       (parameterize ((guix-feature? (features-guix feat))
                      (nls-feature? (features-nls feat))
                      (licensing-feature? (features-licensing feat))
                      (use-guix-specs-for-dependencies?
                       (features-use-guix-specs-for-dependencies feat)))
         (let* ((spec (read-spec))
                (feat (specification-features spec)))
           (when (and guix-feature? (not use-guix-specs-for-dependencies?))
             (log-msg 'WARNING "listing dependencies as guix variable names "
                      "is deprecated; consider setting the "
                      "`use-guix-specs-for-dependencies' feature to #t"))
           (match cmd
             (("hall" "clean")
              (clean-project (read-spec) (find-project-root-directory)
                             (option-ref options 'skip) operation))
             (("hall" "build-system")
              (make-build-infrastructure (read-spec) (find-project-root-directory)
                                         operation force)
              (cond ((and force (eqv? operation 'exec) (nls-feature?))
                     (system "rm -rf po/Makefile*")
                     (gettextize ">/dev/null")
                     (autoreconf "-vif"))
                    ((and force (eqv? operation 'exec))
                     (autoreconf "-vif"))
                    ((eqv? operation 'exec)
                     (autoreconf "-i")))
              (match (option-ref options '(target))
                ("" #f)
                (target
                 (if (guix-feature?)
                     (for-each (lambda (cmd)
                                 (guix (format #f "shell -Df guix.scm -- ~a"
                                               cmd)))
                               (list
                                "./configure"
                                (format #f "make ~a" target)))
                     (quit-with-error
                      "Make targets are only supported when GUIX-FEATURE is \
switched on in your hall file.")))))
             (("hall" "distribution-system")
              (let ((run (cute <> (read-spec) (find-project-root-directory)
                               operation force)))
                (match (option-ref options '(system))
                  ("brew"
                   (run rewrite-brew-file))
                  ;; Guix is default and only one supported for now
                  (_
                   (match (option-ref options 'type)
                     ('local (run rewrite-guix-file))
                     ('git (run git-guix-recipe))
                     ('tarball (run tarball-guix-recipe)))))))

             (("hall" "initiate" "refresh")
              (recreate-project-here (read-spec) '() operation))
             (("hall" "scan")
              (scan-project (read-spec) (find-project-root-directory)
                            (option-ref options 'skip) operation))
             (("hall" "add")
              (match (cons (option-ref options '(filename))
                           (option-ref options '(section)))
                ((or (#f . _) (_ . #f)) (emit-help options))
                ((fn . sc) (add-to-project (read-spec) (find-project-root-directory)
                                           fn sc (option-ref options 'template)
                                           operation))))
             (("hall" "publish")
              (publish-project (read-spec) operation)))))))
    (emit-notes)
    (shutdown-logging)))

;;; Local Variables:
;;; mode: scheme
;;; End:
